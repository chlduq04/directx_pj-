getPositionMon()
//		if(rand()%10 == 1&&!mon->isJump()){
//			mon->setVelocity((mon->getGoal()-mon->getPosition())/250*speed);
//			mon->setVelocityY(0.5f);
//			mon->setJump(true);
//		}
//		else{
//			mon->setVelocity((mon->getGoal()-mon->getPosition())/250*speed);
//		}

		//if( mon->getVelocity().y>0.2f ){
		//	mon->setVelocityY(mon->getVelocity().y-(vGravity+rGravity)*bSpeed*4.0*speed);
		//}
		//else{
		//	mon->setJump(false);
		//}


pathen

10 normalMove(time);
20 closetoMove(time);
30.stopMove(time);
40.dodgeMove(time);
50 jumpMove(time);

1 wallMdoe(time);
2 defenceMode(time);
3 healingMode(time);	
4 missileMode(time);
5 raserMode(time);
6 rushMode(time);
7 normalAtt(time);



기본
10
- 4
- 7
- 3
- 1 - 4,5
- 2 - 3
20
- 7
- 6 
30
- 4
- 5
- 3
40
- 2
- 4
50 
- 6
- 7
PASE1
-
10
- 1 - 3 
- 2 - 5,6
20
30
- 1 - 4,5,6
- 2 - 3,6
40
- 1 - 3
PASE2
-
10
- 4 - 7
- 1 - 6
20
- 2 - 5
30
- 3 - 4
40
- 1 - 4,5
- 5
- 2 - 5
50
- 2 - 6,7
- 4 - 5


예전 mode
bool Monai::missileMode(float time){
	if((msion == false)&&(time-msiEndTime-MSI_END_DELAY>0)){
		msiStartTime = time;
		msion = true;
		for(int i=0;i<10;i++){
			msi[i]->start();
		}
	}
	if(msion == true){
		if((time - msiStartTime < MSI_START_DELAY)){
			msionAll = true;
			for(int i=0;i<10;i++){
				msi[i]->moveMissile(mon,cha,time);
				if(msionAll&&msi[i]->nowStart()){
					msionAll = false;
				}
			}
			return true;
		}
		else if(msionAll==false){
			msionAll = true;
			for(int i=0;i<10;i++){
				msi[i]->moveMissile(mon,cha,time);
				if(msi[i]->nowStart()){
					msionAll = false;
				}
			}
			return true;
		}
		else{
			msionAll = false;
			msion = false;
			msiEndTime = time;
			return false;
		}
	}
	return false;

}
bool Monai::wallMode(float time){
	if(!mov->getMonWall()){
		if((wallon == false)&&(time-wallEndTime-WALL_END_DELAY>0)){
			wallStartTime = time;
			wallon = true;
			wallPos =  rand()%(int)MAXBOUNDX;
			mov->setMonWall(true);
		}
	}else{
		if(wallon == true){
			if(time - wallStartTime < WALL_START_DELAY){
				switch(wallPos%3){
				case 0:
					mov->getPositionWall(D3DXVECTOR3(wallPos,0,0),GAMESPEED);
					break;
				case 1:
					//mov->getPositionWall(cha,wall,D3DXVECTOR3(0,wallPos,0),GAMESPEED);
					//break;
				case 2:
					mov->getPositionWall(D3DXVECTOR3(0,0,wallPos),GAMESPEED);
					break;
				}
				return true;
			}
			else{
				wallon = false;
				wallEndTime = time;
				mov->returnWall();
				return false;
			}
		}
		return false;
	}
	return false;
}
bool Monai::healingMode(float time){
	if((healon == false)&&(time-healEndTime-HEAL_END_DELAY>0)){
		healStartTime = time;
		healEachDelay = time;
		healon = true;
	}
	if(healon == true){
		if(time - healStartTime < HEAL_START_DELAY){
			if(time - healEachDelay > 1){
				healEachDelay = time;
				mon->monHealing();
			}
			return true;
		}
		else{
			healon = false;
			healEndTime = time;
			return false;
		}
	}
	return false;

}